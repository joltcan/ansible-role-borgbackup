#!{{ borgbackup_shell }}

##
## {{Â ansible_managed }}
## 

if [ -z "$1" ] || [ ! -z "$2" ]
  then
    printf "Possible: info | init | list | backup | mount \n\n"
fi

# Sourcing the backup-passphrase

. ~{{ borgbackup_client_user }}/.borg.passphrase

# Small helper commands, like listing backups, will help us in the future :)

if [ "$1" = "info" ]
  then
    if [ -z "$2" ]; then printf "run $0 with list and use the backup-tag to request information\n"; exit 1; fi
{% for b in borgbackup_servers %}
    REPOSITORY={% if b.type == 'hetzner' %}ssh://{% endif %}{{ b.user }}@{{ b.fqdn }}:{% if b.type == 'hetzner' %}23/./{% endif %}{{ b.home }}{{ b.pool }}/{{ inventory_hostname }}
    /usr/local/bin/borg info {{ b.options }} $REPOSITORY::$2
{% endfor %}
    exit 0
fi

if [ "$1" = "mount" ]
  then
    if [ -z "$2" ]; then printf "Select the backup-server\n"; exit 1; fi
    if [ -z "$3" ]; then printf "Select the backup to mount\n"; exit 1; fi
    if [ -z "$4" ]; then printf "Select the path to mount the backup on\n"; exit 1; fi
{% for b in borgbackup_servers %}
    REPOSITORY={% if b.type == 'hetzner' %}ssh://{% endif %}{{ b.user }}@{{ b.fqdn }}:{% if b.type == 'hetzner' %}23/./{% endif %}{{ b.home }}{{ b.pool }}/{{ inventory_hostname }}
    /usr/local/bin/borg mount {{ b.options }} $REPOSITORY::$3 $4
    if [ "$?" = "0" ]; then printf "Backup mounted on $4, do not forget to unmount!\n"; fi
    exit 0
{% endfor %}
fi

if [ "$1" = "list" ]
  then
{% for b in borgbackup_servers %}
    REPOSITORY={% if b.type == 'hetzner' %}ssh://{% endif %}{{ b.user }}@{{ b.fqdn }}:{% if b.type == 'hetzner' %}23/./{% endif %}{{ b.home }}{{ b.pool }}/{{ inventory_hostname }}
    printf "Archives on {{ b.fqdn }} :\n"
    /usr/local/bin/borg list {{ b.options }} -v $REPOSITORY
{% endfor %}
    exit 0
fi

if [ "$1" = "init" ]
  then
{% for b in borgbackup_servers %}
    REPOSITORY={% if b.type == 'hetzner' %}ssh://{% endif %}{{ b.user }}@{{ b.fqdn }}:{% if b.type == 'hetzner' %}23/./{% endif %}{{ b.home }}{{ b.pool }}/{{ inventory_hostname }}
    /usr/local/bin/borg init --encryption={{ borgbackup_encryption_mode }} {{ b.options }} $REPOSITORY
{% endfor %}
    exit 0
fi

if [ "$1" = "backup" ]
  then
    date=`date +%Y%m%d-%H%M`

    # Running some commands pre-backup
{% for precommand in borgbackup_pre_commands %}
    {{ precommand }}
{% endfor %}

# Create array for exit codes
BORGEXIT=()
{% for b in borgbackup_servers %}
    printf "Backing up to {{ b.fqdn }} :\n"
    REPOSITORY={% if b.type == 'hetzner' %}ssh://{% endif %}{{ b.user }}@{{ b.fqdn }}:{% if b.type == 'hetzner' %}23/./{% endif %}{{ b.home }}{{ b.pool }}/{{ inventory_hostname }}

    /usr/local/bin/borg create --progress --compression {{ borgbackup_compression }} --stats {{ b.options }} $REPOSITORY::$date {% for dir in borgbackup_include %}{{ dir }} {% endfor %}{% if automysql.stat.isdir is defined and automysql.stat.isdir == True %}/var/lib/automysqlbackup{% endif %} {% for dir in borgbackup_exclude %} --exclude '{{ dir }}'{% endfor %} 
    BORGEXIT+=($?)
{% if mysql_installed.stat.isdir is defined and borgbackup_do_mysql == True %}

    mysqldump -A | /usr/local/bin/borg create --progress --compression {{ borgbackup_compression }} --stats {{ b.options }} $REPOSITORY::mysqldump-$date - 
    BORGEXIT+=($?)

{% endif %}
{% if borgbackup_do_plex is defined %}

    sqlite3 "/var/lib/plexmediaserver/Library/Application Support/Plex Media Server/Plug-in Support/Databases/com.plexapp.plugins.library.db" .dump  | /usr/local/bin/borg create --progress --compression {{ borgbackup_compression }} --stats {{ b.options }} $REPOSITORY::plex-dump-$date - 
    BORGEXIT+=($?)

{% endif %}
    # iterate over exit codes
    EXITCODE=''
    for i in ${BORGEXIT[@]}; do
        ((EXITCODE+=$i))
    done

    if [ $EXITCODE -eq 0 ]; then 
        printf "Backup succeeded on $date to {{ b.fqdn }}\n" >> /var/log/borg-backup.log
{% if borgbackup_statuscake_url is defined %}
        curl -sfL "{{borgbackup_statuscake_url}}" --output /dev/null
{% endif %}

{% if not borgbackup_appendonly %}
    # prune old backups if we exited correctly
    /usr/local/bin/borg prune {{ b.options }} -v $REPOSITORY -H {{ borgbackup_retention.hourly }} -d {{ borgbackup_retention.daily }} -w {{ borgbackup_retention.weekly }} -m {{ borgbackup_retention.monthly }} -y {{ borgbackup_retention.yearly }}
{% endif %}
    else
        printf "Backup FAILED on $date to {{ b.fqdn }}\n" >> /var/log/borg-backup.log
    fi

{% endfor %}

{% for postcommand in borgbackup_post_commands %}
    # Running some commands post-backup
    if [ $EXITCODE -eq 0 ]; then 
        {{ postcommand }}
    fi 
{% endfor %}

fi

